#!/bin/bash

# mkliveinstaller - Genuine GNU/Linux 2020

# By Antonio Cao.

# mkliveinstaller #
LIVEINSTALLER="liveinstaller"
PROG="mk$LIVEINSTALLER"

# initramfs init script #
INIT="init"
INITIN="init.in"

# Load some configurations #
source ${PROG}.conf

# mkinitramfs datadir #
DATADIR=/usr/share/$PROG

# Host information #
HOSTARCH="$(uname -m)"
RUNNING_KERNEL="$(uname -r)"

# Create base directory structure
copy() {
  local file

  if [ "$2" == "lib" ]; then
      file=$(PATH=/lib:/lib/elogind:/usr/lib:/usr/libexec type -p $1)
  else
    file=$(type -p $1)
  fi

  if [ -n $file ]; then
    cp $file $WDIR/$2
  else
    echo "Missing required file: $1 for directory $2"
    rm -rf $WDIR
    exit 1
  fi
}

LIVEINSTALLER_FILE="genuine-liveinstaller-$HOSTARCH.img"

KERNEL_VERSION="$(uname -r)"

if [ -n "$KERNEL_VERSION" ] && [ ! -d "/lib/modules/$1" ] ; then
  echo "No modules directory named $1"
  exit 1
fi

if [ -f "$LIVEINSTALLER_FILE" ]; then
	printf "[(·)] $PROG-$MKLIVEINSTALLER_VERSION: Backing up $LIVEINSTALLER_FILE ... "
	mv $LIVEINSTALLER_FILE $LIVEINSTALLER_FILE.bak
  printf "done.\n"
fi

printf "[(·)] $PROG-$MKLIVEINSTALLER_VERSION: Creating $LIVEINSTALLER_FILE ... "

# Create a temporar unsorted file
unsorted=$(mktemp /tmp/unsorted.XXXXXXXXXX)

# Create a temporary working directory
WDIR=$(mktemp -d /tmp/liveinstaller-work.XXXXXXXXXX)

# Create live disk image #
#IMGSIZE="680"
#echo "start=   2048,    size=   1392639, type=83" > /tmp/sfdisk.partition.layout
#modprobe loop
#dd if=/dev/zero of=$LIVEINSTALLER_FILE bs=1M count=$IMGSIZE
#losetup /dev/loop0 $LIVEINSTALLER_FILE
#dd if=/usr/share/syslinux/mbr.bin of=/dev/loop0
#sfdisk /dev/loop0 < /tmp/sfdisk.partition.layout
#losetup -d /dev/loop0
#losetup -o 2048 /dev/loop1 $LIVEINSTALLER_FILE
#mkfs.ext2 /dev/loop1
#mount /dev/loop1 $WDIR

# File to copy to image #
binfiles="sh bash cat cp dd pkill killall ls lsblk mkdir mknod mount du tr true false top tee touch mkfifo mktemp setterm flock "
binfiles="$binfiles uptime umount sed sleep ln rm mv uname find dd dmesg dirname strings stty tty renice ping ps pidof more dircolors "
binfiles="$binfiles readlink basename loadkeys setsid chown chmod clear chvt env date cut df rc-status nslookup dig hostname stat "
binfiles="$binfiles kbd_mode vlock showconsolefont setkeycodes setleds setmetamode loadunimap dumpkeys lsusb usbhid-dump gzip "
binfiles="$binfiles deallocvt kbdinfo mapscrn fgconsole openvt setvtrgb setfont showkey getkeycodes keyctl dircolors findmnt locale "

# Xorg
binfiles="$binfiles Xorg Xnest Xvfb Xwayland wayland-scanner xauth xconsole xterm xev xfont xhost xkbevd xkbvleds xkbwatch xkill "
binfiles="$binfiles xmessage xrandr xrdb xprop xpath xset xsetroot xvidtune xvinfo xwd xwininfo xwud gtk-query-settings "
binfiles="$binfiles xinit startx zenity update-mime-database update-desktop-database gdk-pixbuf-query-loaders "

# Dbus
binfiles="$binfiles dbus-launch dbus-run-session dbus-test-tool dbus-update-activation-environment "
binfiles="$binfiles dbus-cleanup-sockets dbus-uuidgen dbus-daemon dbus-send dbus-monitor "
binfiles="$binfiles dbus-binding-tool "

# Elogind
if [ -x "/bin/loginctl" ]; then
  binfiles="$binfiles loginctl busctl elogind-inhibit "
fi

# Busybox
if [ -x "/bin/busybox" ]; then
	binfiles="$binfiles busybox "
fi

# OpenRC
sbinfiles="$sbinfiles rc runscript start-stop-daemon supervise-daemon request-key key.dns_resolver "
sbinfiles="$sbinfiles openrc openrc-init openrc-shutdown openrc-run rc rc-service rc-update "

# System sbinfiles
sbinfiles="$sbinfiles agetty kexec chroot ntpd NetworkManager sshd init sfdisk "

# FS Manteinance
sbinfiles="$sbinfiles fsck fsck.cramfs fsck.ext3 fsck.minix ip ifconfig route losetup "
sbinfiles="$sbinfiles fsck.ext2 fsck.ext4 reiserfsck blkid switch_root e2fsck "
sbinfiles="$sbinfiles mkfs mkfs.btrfs mkfs.ext2 mkfs.ext4 mkfs.xfs mkfs.bfs mkfs.cramfs mkfs.ext3 mkfs.minix " 

# Framebuffer
sbinfiles="$sbinfiles fbset "

# input-tools
binfiles="$binfiles lsinput input-kbd input-send input-recv input-events "

# GPM Console Mouse
if [ -x /usr/sbin/gpm ]; then
  sbinfiles="$sbinfiles gpm "
  binfiles="$binfiles get-versions display-buttons gpm-root display-coords "
  binfiles="$binfiles mouse-test hltest disable-paste mev "
fi

# pci utils #
sbinfiles="$sbinfiles lspci setpci "

# i2c-tools
sbinfiles="$sbinfiles i2cdump i2ctransfer i2cdetect i2cget i2cset "

#Optional files and locations
for f in mdadm mdmon udevd udevadm ; do
  if [ -x /sbin/$f ] ; then sbinfiles="$sbinfiles $f "; fi
done

mkdir -p $WDIR/{boot,root,bin,sbin,lib/{firmware/brcm,rc/plugins},dev,run/plymouth,sys,proc}
mkdir -p $WDIR/etc/{init.d,conf.d,X11,ld.so.conf.d,dkms,modprobe.d,udev/rules.d,modules-load.d,sysctl.d}
mkdir -p $WDIR/usr/share/{terminfo,plymouth,fonts/X11/TTF,fonts/truetype}
mkdir -p $WDIR/usr/{lib,libexec,bin,sbin,share/X11}
mkdir -p $WDIR/var/{lib/dkms,tmp,log,opt,spool}
mkdir -p $WDIR/var/cache/genetic/{PackagePool,SourcePool,Repositories}

touch $WDIR/etc/modprobe.d/modprobe.conf

# MODULES #
KNOWN_MODULES="$(mkinitramfs-modules -k $KERNEL_VERSION | grep ^Modules | awk -F':' '{print $NF}')"

# FS MODULES #
FS_MODULES="$(mkinitramfs-modules -f $KERNEL_VERSION | grep ^Modules | awk -F':' '{print $NF}')"

# PCI MODULES #
PCI_MODULES="$(mkinitramfs-modules -p $KERNEL_VERSION | grep ^Modules | awk -F':' '{print $NF}')"

# USB MODULES #
USB_MODULES="$(mkinitramfs-modules -u $KERNEL_VERSION | grep ^Modules | awk -F':' '{print $NF}')"

### MODULES TO LOAD ON BOOT ###
MODULES="isofs $KNOWN_MODULES $FS_MODULES $PCI_MODULES $USB_MODULES"

if [ ! -z "$MODULES" ]; then
	for M in $MODULES; do
		echo "$M" > $WDIR/etc/modules-load.d/${M}.conf
	done
fi

# ETC FILES #
etc_conf="/etc/issue \
	/usr/share/$PROG/issue.logo.only \
	/usr/share/$PROG/issue.logo.rescue \
	/etc/inittab \
  /etc/fb.modes \
  /etc/ld.so.conf \
	/etc/genuine-release \
	/etc/os-release \
	/etc/dircolors \
	/etc/inputrc \
  /etc/request-key.conf \
	/etc/shells \
	/etc/devfsd.conf \
	/etc/sysctl.conf \
  /etc/profile.env \
  /etc/motd \
  /etc/rpc \
  /etc/rmt \
  /etc/rc_keymaps \
  /etc/rc_maps.cfg \
  /etc/slsh.rc \
  /etc/kernel \
  /etc/login.defs \
  /etc/pm \
  /etc/dkms \
  /etc/mke2fs.conf \
  /etc/ethertypes \
  /etc/filesystems \
  /etc/dhcpcd.conf \
	/etc/skel \
  /etc/profile \
  /etc/profile.d \
  /etc/bashrc \
  /etc/genetic \
  /etc/env.d \
  /etc/ssh \
  /etc/ssl \
  /etc/uart.conf \
  /etc/default \
	/etc/bash_completion.d"

for conf in $etc_conf; do
  if [ -f "$conf" ] || [ -d "$conf" ]; then
    cp -a $conf $WDIR/etc/
  fi
done;

# Copy init.d scripts
for f in agetty agetty.tty1 agetty.tty2 \
  agetty.tty3 agetty.tty4 agetty.tty5 agetty.tty6 \
  alsasound autofs autoipd binfmt bootlogd bootmisc \
  cgroups consolefont dbus devfs dhcpcd dhcrelay dmesg \
  elogind fsck functions.sh gpm hostname hwclock ip6tables \
  iptables keymaps killprocs kmod-static-nodes local localmount \
  loopback modules mount-ro mtab net.eth0 net.lo netmount \
  net-online network NetworkManager nftables nftables-mk \
  nscd ntpd numlock openrc-settingsd openrc-status opentmpfiles-dev \
  opentmpfiles-setup osclock pmcd pmie pmlogger pmmgr pmproxy \
  procfs root rpcbind rsyncd runsvdir s6-svscan savecache save-keymaps \
  save-termencoding sensord sshd sshd.eth0 staticroute swap \
  swclock sysctl sysfs syslogd termencoding udev udev-postmount \
  udev-settle udev-trigger urandom vbox-vmsvga; do
  if [ -f "/etc/init.d/$f" ]; then
    cp -a /etc/init.d/$f $WDIR/etc/init.d/
  fi
  if [ -f "/etc/conf.d/$f" ]; then
    cp -a /etc/conf.d/$f $WDIR/etc/conf.d/
  fi
done

#cp /etc/mkinitramfs.conf $WDIR/etc/init.in.conf
cp -a /etc/mkinitramfs.conf $WDIR/etc/

ln -sfin /lib $WDIR/lib64
ln -sfin /usr/lib $WDIR/usr/lib64

# Create necessary device nodes
cp --archive /dev/{null,console,tty,sda1} $WDIR/dev/

# Install root profile and bashrc
#cp -a $DATADIR/bashrc/bashrc-root $WDIR/.bashrc
#cp -a $DATADIR/bashrc/profile-root $WDIR/.profile
#cp -a $DATADIR/bashrc/bash-profile-root $WDIR/.bash_profile
#cp -a $DATADIR/bashrc/bash-logout-root $WDIR/.bash_logout
#cp -a $DATADIR/bashrc/bash-history-root $WDIR/.bash_history
#cp -a $DATADIR/bashrc/bashrc-system $WDIR/etc/bashrc
#cp -a $DATADIR/bashrc/profile-system $WDIR/etc/profile
#cp -a $DATADIR/bashrc/profile.env $WDIR/etc/profile.env
#cp -a $DATADIR/bashrc/profile.d $WDIR/etc/

# Copy boot files
cp -a /boot/System.map-$(uname -r)-$(uname -m) $WDIR/boot/
cp -a /boot/vmlinuz-$(uname -r)-$(uname -m) $WDIR/boot
cp -a /boot/initrd.img-$(uname -r)-$(uname -m) $WDIR/boot/
cp -a /boot/grub $WDIR/boot/

# Copy root files
cp -a /etc/skel/.bash* /etc/skel/.profile $WDIR/root

chmod +x $WDIR/root/.bashrc $WDIR/root/.bash_profile $WDIR/etc/bashrc \
  $WDIR/etc/profile.env $WDIR/etc/profile $WDIR/etc/profile.d/*

# Install bash files
cp -a /usr/lib/bash $WDIR/usr/lib/
cp -a /usr/share/bash-completion $WDIR/usr/share/

for d in a d l r s v x; do
  cp -a /usr/share/terminfo/${d} $WDIR/usr/share/terminfo/
done

# Passwd & Group
cp -a /usr/share/genuine-base-system/group $WDIR/etc/
cp -a /usr/share/genuine-base-system/passwd $WDIR/etc/
cp -a /usr/share/genuine-base-system/gshadow $WDIR/etc/
cp -a /usr/share/genuine-base-system/shadow $WDIR/etc/
chmod 400 $WDIR/etc/shadow $WDIR/etc/gshadow
chmod 644 $WDIR/etc/passwd $WDIR/etc/group

# Install the udev configuration files
if [ -f /etc/udev/udev.conf ]; then
  cp -a /etc/udev/udev.conf $WDIR/etc/udev/udev.conf
fi

for file in $(find /etc/udev/rules.d/ -type f); do
  cp -a $file $WDIR/etc/udev/rules.d/
  if [ -f $WDIR/etc/udev/rules.d/99-iscsi.rules ]; then
    rm $WDIR/etc/udev/rules.d/99-iscsi.rules
  fi
  if [ -f $WDIR/etc/udev/rules.d/80-docker.rules ]; then
    rm $WDIR/etc/udev/rules.d/80-docker.rules
  fi
done

if [ -d /etc/udev/scripts ]; then
  cp -a /etc/udev/scripts $WDIR/etc/udev/
fi

#cp -a /etc/udev/hwdb.* $WDIR/etc/udev

cp -a /lib/libudev* $WDIR/lib/

# Install any firmware present
#cp -a /lib/firmware $WDIR/lib/

# Install hardware data #
cp -a /usr/share/hwdata $WDIR/usr/share/

# Install only required firmware
cp -a /lib/firmware/brcm/BCM-0bb4-0306.hcd $WDIR/lib/firmware/brcm/
#cp -a /lib/firmware/brcm/BCM20702A1-0a5c-640b.hcd $WDIR/lib/firmware/brcm/

# DKMS #
cp -a /usr/sbin/dkms $WDIR/sbin/
cp -a /usr/lib/dkms $WDIR/usr/lib/
cp -a /var/lib/dkms/dkms_dbversion $WDIR/var/lib/dkms/

# Install OpenRC libexec
cp -a /usr/libexec/{bin,sh,version,sbin,console,coreutils} $WDIR/usr/libexec/
cp -a /etc/sysctl.d $WDIR/etc/
cp -a /usr/share/openrc $WDIR/usr/share/

# NetifRC
if [ -d /usr/libexec/netifrc ]; then
	cp -a /usr/libexec/netifrc $WDIR/usr/libexec/
fi

# dhcpcd
if [ -x /usr/sbin/dhcpcd ]; then
  sbinfiles="$sbinfiles dhcpcd "
  mkdir -p $WDIR/usr/share/dhcpcd/hooks
  cp -a /usr/share/dhcpcd/hooks/* $WDIR/usr/share/dhcpcd/hooks/
  cp -a /usr/lib/dhcpcd $WDIR/usr/lib/
  cp -a /lib/dhcpcd $WDIR/lib/
fi;

# Dbus
mkdir -p $WDIR/var/lib/dbus
mkdir -p $WDIR/usr/lib/python2.7/site-packages
mkdir -p $WDIR/usr/lib/python3.8/site-packages
cp -a /etc/dbus-1 $WDIR/etc/
cp -a /usr/share/dbus-1 $WDIR/usr/share/
cp -a /usr/libexec/dbus-daemon-launch-helper $WDIR/usr/libexec/
cp -a /usr/libexec/dbus-bash-completion-helper $WDIR/usr/libexec/
cp -a /usr/lib/python2.7/site-packages/_dbus* $WDIR/usr/lib/python2.7/site-packages
cp -a /usr/lib/python2.7/site-packages/dbus* $WDIR/usr/lib/python2.7/site-packages
cp -a /usr/lib/python3.8/site-packages/dbus* $WDIR/usr/lib/python3.8/site-packages
cp -a /usr/lib/python3.8/site-packages/_dbus* $WDIR/usr/lib/python3.8/site-packages

# Python2
for py2pkg in Python2 python2-defaults python2-distutils-extra; do 
  for py2dir in $(cat /var/cache/genetic/$py2pkg/${py2pkg}*.dirs); do
    mkdir -p $WDIR$py2dir;
  done

  for py2file in $(cat /var/cache/genetic/$py2pkg/${py2pkg}*.files); do
    cp -a $py2file $WDIR$py2file;
  done

  for py2link in $(cat /var/cache/genetic/$py2pkg/${py2pkg}*.links); do
    cp -a $py2link $WDIR$py2link;
  done
done

# Python3
for py3pkg in Python python-defaults python3-distutils-extra; do 
  for py3dir in $(cat /var/cache/genetic/$py3pkg/${py3pkg}*.dirs); do
    mkdir -p $WDIR$py3dir;
  done

  for py3file in $(cat /var/cache/genetic/$py3pkg/${py3pkg}*.files); do
    cp -a $py3file $WDIR$py3file;
  done

  for py3link in $(cat /var/cache/genetic/$py3pkg/${py3pkg}*.links); do
    cp -a $py3link $WDIR$py3link;
  done
done

# Elogin libraries
if [ -d /lib/elogind ]; then
  cp -a /lib/elogind $WDIR/lib/
fi

# Console fonts
cp -a /usr/share/console* $WDIR/usr/share/

# Keymaps
cp -a /usr/share/key* $WDIR/usr/share/
cp -a /usr/share/uni* $WDIR/usr/share/

# Copy the RAID configuration file if present
if [ -f /etc/mdadm.conf ] ; then
  cp -a /etc/mdadm.conf $WDIR/etc
fi

# Genetic
cp -a /sbin/genetic $WDIR/sbin/
cp -a /usr/lib/genetic $WDIR/usr/lib/

# Plymouth
if [ -f /usr/bin/plymouthd ]; then
  mkdir -p $WDIR/usr/lib/plymouth/renderers
  cp -a /etc/plymouth $WDIR/etc/
  cp -a /usr/sbin/plymouthd $WDIR/usr/sbin/
  cp -a /usr/bin/plymouth $WDIR/usr/bin/
  cp -a /usr/bin/plymouth-upstart-bridge $WDIR/usr/bin/
  cp -a /usr/sbin/plymouth-set-default-theme $WDIR/usr/sbin/
  cp -a /usr/lib/plymouth/text.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/details.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/script.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/fade-throbber.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/tribar.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/space-flares.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/label.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/two-step.so $WDIR/usr/lib/plymouth/
  cp -a /usr/lib/plymouth/renderers/frame-buffer.so $WDIR/usr/lib/plymouth/renderers/
  cp -a /usr/lib/plymouth/renderers/drm.so $WDIR/usr/lib/plymouth/renderers/
  cp -a /usr/lib/plymouth/renderers/x11.so $WDIR/usr/lib/plymouth/renderers/
  cp -a /lib/rc/plugins/plymouth.so $WDIR/lib/rc/plugins/
  cp -a /usr/lib/libply.so.5 $WDIR/usr/lib/
  cp -a /usr/lib/libply.so $WDIR/usr/lib/
  cp -a /usr/lib/libply.so.5.0.0 $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-core.so.5 $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-core.so $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-core.so.5.0.0 $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-graphics.so.5 $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-graphics.so $WDIR/usr/lib/
  cp -a /usr/lib/libply-splash-graphics.so.5.0.0 $WDIR/usr/lib/
  cp -a /usr/lib/libply-boot-client.so.5.0.0 $WDIR/usr/lib/
  cp -a /usr/lib/libply-boot-client.so $WDIR/usr/lib/
  cp -a /usr/lib/libply-boot-client.so.5 $WDIR/usr/lib/
  cp -a /usr/share/fonts/X11/TTF/bitwise.ttf $WDIR/usr/share/fonts/X11/TTF/
  cp -a /usr/share/plymouth/plymouthd.defaults $WDIR/usr/share/plymouth
fi

# populate plymouth if available
if [ -x /usr/libexec/plymouth/plymouth-populate-initrd ]; then
        /usr/libexec/plymouth/plymouth-populate-initrd -t $WDIR/
fi

# Install the init file
#install -m0755 /usr/share/mkinitramfs/$INITIN $WDIR/init

if [  -n "$KERNEL_VERSION" ] ; then
  if [ -x /bin/kmod ] ; then
    binfiles="$binfiles kmod "
  else
    binfiles="$binfiles lsmod "
    sbinfiles="$sbinfiles insmod "
  fi
fi

# Install basic binaries
for f in $binfiles ; do
  if [ -e /bin/$f ]; then d="/bin"; else d="/usr/bin"; fi
  ldd $d/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
  copy $d/$f bin
done

# Add lvm if present
if [ -x /sbin/lvm ]; then sbinfiles="$sbinfiles lvm dmsetup "; fi

for f in $sbinfiles; do
  if [ -e /sbin/$f ]; then d="/sbin"; else d="/usr/sbin"; fi
  ldd $d/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
  copy $f sbin
done

binscripts="ddcmon decode-edid decode-dimms decode-vaio lsusb.py usb-devices X "
for f in $binscripts; do
  if [ -f "/bin/$f" ]; then
    if [ -e /bin/$f ]; then d="/bin"; else d="/usr/bin"; fi
    cp -a $d/$f $WDIR$d/
  fi
done

sbinscripts="modprobe halt reboot fsck.reiserfs fsck.btrfs fsck.xfs "
sbinscripts="$sbinscripts unicode_start kbdrate unicode_stop mkinitramfs "
sbinscripts="$sbinscripts modeline2fb i2c-stub-from-dump mkinitramfs-modules "

for f in $sbinscripts; do
  if [ -f "/sbin/$f" ]; then
    if [ -e /sbin/$f ]; then d="/sbin"; else d="/usr/sbin"; fi
    cp -a $d/$f $WDIR$d/
  fi
done

# Add udevd libraries if not in /sbin
if [ -x /sbin/udevd ] ; then
  ldd /sbin/udevd | sed "s/\t//" | cut -d " " -f1 >> $unsorted
fi

# Add module symlinks if appropriate
if [ -n "$KERNEL_VERSION" ] && [ -x /bin/kmod ] ; then
  ln -s kmod $WDIR/bin/lsmod
  ln -s kmod $WDIR/bin/insmod
fi

# Add lvm symlinks if appropriate
# Also copy the lvm.conf file
if  [ -x /sbin/lvm ] ; then
  ln -s lvm $WDIR/sbin/lvchange
  ln -s lvm $WDIR/sbin/lvrename
  ln -s lvm $WDIR/sbin/lvextend
  ln -s lvm $WDIR/sbin/lvcreate
  ln -s lvm $WDIR/sbin/lvdisplay
  ln -s lvm $WDIR/sbin/lvscan

  ln -s lvm $WDIR/sbin/pvchange
  ln -s lvm $WDIR/sbin/pvck
  ln -s lvm $WDIR/sbin/pvcreate
  ln -s lvm $WDIR/sbin/pvdisplay
  ln -s lvm $WDIR/sbin/pvscan

  ln -s lvm $WDIR/sbin/vgchange
  ln -s lvm $WDIR/sbin/vgcreate
  ln -s lvm $WDIR/sbin/vgscan
  ln -s lvm $WDIR/sbin/vgrename
  ln -s lvm $WDIR/sbin/vgck
  # Conf file(s)
  cp -a /etc/lvm $WDIR/etc
fi

# Install libraries
sort $unsorted | uniq | while read library ; do
  if [ "$library" == "linux-vdso.so.1" ] ||
     [ "$library" == "linux-gate.so.1" ] ||
     [ "$library" == "" ]; then
    continue
  fi
  copy $library lib
done

if [ -d /lib/udev ]; then
  cp -a /lib/udev $WDIR/lib
fi

# patch libfl.so
cp -a /usr/lib/libfl.so $WDIR/lib/
cp -a /usr/lib/libfl.so.* $WDIR/lib/

# Link busybox functions
if [ -x /bin/busybox ]; then
  /bin/busybox --install -s $WDIR/bin
  cp /usr/share/busybox/examples/dnsd.conf $WDIR/etc/
  cp /usr/share/busybox/examples/mdev.conf $WDIR/etc/
  for prog in $(ls $WDIR/sbin); do
    if [ -f "$WDIR/bin/$prog" ]; then
      rm $WDIR/bin/$prog
    fi
  done
fi;

# Install the kernel modules if requested
if [ -n "$KERNEL_VERSION" ]; then
  # COPY ALL REQUIRED MODULES TO LIVEINSTALLER #
  for m in isofs romfs cramfs $(mkinitramfs-modules -H | awk -F':' '{print $NF}' | sort | uniq | awk -v ORS=' ' '{print $0}'); do
    find /lib/modules/$KERNEL_VERSION -name "${m}*" \
      -type f 2> /dev/null | grep -v "/sound/" | \
      cpio --make-directories -p --quiet $WDIR &>/dev/null
  done

  cp /lib/modules/$KERNEL_VERSION/modules.{builtin,order} \
    $WDIR/lib/modules/$KERNEL_VERSION

  depmod -b $WDIR $KERNEL_VERSION
fi

find $WDIR/lib $WDIR/usr/lib $WDIR/bin $WDIR/sbin $WDIR/usr/bin $WDIR/usr/sbin $WDIR/usr/libexec -type f -exec chmod +x {} \; &>/dev/null
find $WDIR -type f -name "*.la" -exec rm {} \; &>/dev/null

cp -a /sbin/ldconfig $WDIR/sbin/
chroot $WDIR /sbin/ldconfig &>/dev/null
#rm $WDIR/sbin/ldconfig

# SYSLINUX
cp -a /usr/share/syslinux $WDIR/boot/

echo "DEFAULT menu.c32
LABEL linux
  KERNEL /boot/vmlinuz-$(uname -r)-$(uname -m)
  APPEND /boot/initramfs-$(uname -r).img" > $WDIR/boot/syslinux/syslinux.cfg

#umount $WDIR/boot
umount $WDIR

#losetup -d /dev/loop1

xorriso -as mkisofs \
  -o $LIVEINSTALLER_FILE \
  -c boot/syslinux/boot.cat \
  -b boot/syslinux/isolinux.bin \
  -no-emul-boot -boot-load-size 4 -boot-info-table \
  $WDIR

#xorriso -as mkisofs \
#  -o $LIVEINSTALLER_FILE \
#  -isohybrid-mbr /usr/share/syslinux/isohdpfx.bin \
#  -c syslinux/boot.cat \
#  -b syslinux/isolinux.bin \
#  -no-emul-boot -boot-load-size 4 -boot-info-table \
#  $WDIR

# Remove the temporary directory and file
#rm -rf $WDIR $unsorted
rm -rf $unsorted
printf "done.\n"

